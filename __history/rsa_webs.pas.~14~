unit rsa_webs;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, IPPeerClient, REST.Client, System.JSON,
  Data.Bind.Components, Data.Bind.ObjectScope, Vcl.StdCtrls, REST.JSON, REST.Types,
  cxGraphics, cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer,
  cxEdit, dxSkinsCore, dxSkinBlack, dxSkinBlue, dxSkinBlueprint, dxSkinCaramel,
  dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide, dxSkinDevExpressDarkStyle,
  dxSkinDevExpressStyle, dxSkinFoggy, dxSkinGlassOceans, dxSkinHighContrast,
  dxSkiniMaginary, dxSkinLilian, dxSkinLiquidSky, dxSkinLondonLiquidSky,
  dxSkinMcSkin, dxSkinMetropolis, dxSkinMetropolisDark, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinOffice2013DarkGray,
  dxSkinOffice2013LightGray, dxSkinOffice2013White, dxSkinOffice2016Colorful,
  dxSkinOffice2016Dark, dxSkinPumpkin, dxSkinSeven, dxSkinSevenClassic,
  dxSkinSharp, dxSkinSharpPlus, dxSkinSilver, dxSkinSpringTime, dxSkinStardust,
  dxSkinSummer2008, dxSkinTheAsphaltWorld, dxSkinsDefaultPainters,
  dxSkinValentine, dxSkinVisualStudio2013Blue, dxSkinVisualStudio2013Dark,
  dxSkinVisualStudio2013Light, dxSkinVS2010, dxSkinWhiteprint,
  dxSkinXmas2008Blue, cxTextEdit;

type
  TRsa = class
  private
    Fdescripto: string;
    Fkeys: string;
    Fcripto: string;
    FmyKey: string;
    Ftext: string;
    procedure Setcripto(const Value: string);
    procedure Setdescripto(const Value: string);
    procedure Setkeys(const Value: string);
    procedure SetmyKey(const Value: string);
    procedure Settext(const Value: string);
  public
    property keys : string read Fkeys write Setkeys;
    property cripto : string read Fcripto write Setcripto;
    property descripto : string read Fdescripto write Setdescripto;
    property myKey : string read FmyKey write SetmyKey;
    property text : string read Ftext write Settext;
  end;
  TForm1 = class(TForm)
    RESTClient: TRESTClient;
    RESTRequest: TRESTRequest;
    RESTResponse: TRESTResponse;
    Button1: TButton;
    Button2: TButton;
    Button3: TButton;
    cxTextEdit2: TcxTextEdit;
    cxTextEdit3: TcxTextEdit;
    cxTextEdit4: TcxTextEdit;
    Memo1: TMemo;
    Memo2: TMemo;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.Button1Click(Sender: TObject);
var
  VCarregar :  TRsa;
  VJSONObject, VJSONResp : TJsonObject;
  VJSONPair, VJSONPair2 : TJSONPair;
  id , valorJSON : string;
begin
 // VCarregar := TRsa.Create();
  try

    //VJSONObject := TJSON.ObjectToJsonObject(VCarregar);

    RESTRequest.Method := TRESTRequestMethod.rmGET;
    RESTRequest.Resource := '/keys'; // = /cartoes/{id}/saldo'
    RestRequest.Params.Clear;
   { RestRequest.Params.Add;
    RestRequest.Params[0].ContentType := ctAPPLICATION_JSON;
    RestRequest.Params[0].Kind := pkHTTPHEADER;
    RestRequest.Params[0].Name := 'access-token';
    RestRequest.Params[0].Value := TokenEdit.Text;
    RESTRequest.AddBody(VJSONObject.ToString, ContentTypeFromString('application/json')); }
    RESTRequest.Execute;

    if RESTResponse.StatusCode = 200 then
      ShowMessage('Keys solicitadas com sucesso');

    valorJSON := RESTResponse.Content;
    VJSONResp := RESTResponse.JSONValue as TJSONObject;
    VJSONPair := VJSONResp.Get(0);
    VJSONPair2 := VJSONResp.Get(1);
    memo1.Clear;
    memo2.Clear;
    memo1.lines.add(VJSONPair.JsonValue.Value);
    memo2.lines.add(VJSONPair2.JsonValue.Value);

  finally
    //VCarregar.Free;
  end;

end;

procedure TForm1.Button2Click(Sender: TObject);
var
  VCarregar :  TRsa;
  VJSONObject, VJSONResp : TJsonObject;
  VJSONPair : TJSONPair;
  id , valorJSON : string;
begin
  VCarregar := TRsa.Create();
  try

    //VCarregar.myKey := memo1.text ;
   // VCarregar.text := cxTextEdit2.text ;
    //VJSONObject := TJSON.ObjectToJsonObject(VCarregar);

    RESTClient.ResetToDefaults;
    RESTRequest.ResetToDefaults;
    RESTResponse.ResetToDefaults;
    RESTClient.BaseURL := '127.0.0.1:3333';
    RESTRequest.Method := TRESTRequestMethod.rmPOST;
    RESTRequest.Resource := '/encrypt';
    RESTRequest.AddParameter('text', cxTextEdit4.text);
    RESTRequest.AddParameter('myKey', memo1.Text);
    // RESTRequest.Body.Add(memo1.text);
    // RESTRequest.Body.Add(cxTextEdit2.text);
    RESTRequest.Execute;

    if RESTResponse.StatusCode = 200 then
      ShowMessage('Keys solicitadas com sucesso');

    valorJSON := RESTResponse.Content;
    VJSONResp := RESTResponse.JSONValue as TJSONObject;
    VJSONPair := VJSONResp.Get(0);

    cxTextEdit2.Text := VJSONPair.JsonValue.Value;

  finally
    VCarregar.Free;
  end;
end;

procedure TForm1.Button3Click(Sender: TObject);
var
  VCarregar :  TRsa;
  VJSONObject, VJSONResp : TJsonObject;
  VJSONPair : TJSONPair;
  id , valorJSON : string;
begin
  VCarregar := TRsa.Create();
  try

    //VCarregar.myKey := memo1.text ;
   // VCarregar.text := cxTextEdit2.text ;
    //VJSONObject := TJSON.ObjectToJsonObject(VCarregar);

    RESTClient.ResetToDefaults;
    RESTRequest.ResetToDefaults;
    RESTResponse.ResetToDefaults;
    RESTClient.BaseURL := '127.0.0.1:3333';
    RESTRequest.Method := TRESTRequestMethod.rmPOST;
    RESTRequest.Resource := '/decrypt';
    RESTRequest.AddParameter('encrypted', cxTextEdit2.text);
    RESTRequest.AddParameter('myKey', memo2.Text);
    // RESTRequest.Body.Add(memo1.text);
    // RESTRequest.Body.Add(cxTextEdit2.text);
    RESTRequest.Execute;

    if RESTResponse.StatusCode = 200 then
      ShowMessage('Keys solicitadas com sucesso');

    valorJSON := RESTResponse.Content;
    VJSONResp := RESTResponse.JSONValue as TJSONObject;
    VJSONPair := VJSONResp.Get(0);

    cxTextEdit3.Text := VJSONPair.JsonValue.Value;

  finally
    VCarregar.Free;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  RESTClient.ResetToDefaults;
  RESTRequest.ResetToDefaults;
  RESTResponse.ResetToDefaults;
  RESTClient.BaseURL := '127.0.0.1:3333/';
end;

{ TRsa }

procedure TRsa.Setcripto(const Value: string);
begin
  Fcripto := Value;
end;

procedure TRsa.Setdescripto(const Value: string);
begin
  Fdescripto := Value;
end;

procedure TRsa.Setkeys(const Value: string);
begin
  Fkeys := Value;
end;

procedure TRsa.SetmyKey(const Value: string);
begin
  FmyKey := Value;
end;

procedure TRsa.Settext(const Value: string);
begin
  Ftext := Value;
end;

end.
